- 원시코드 : Source = 사람이 작성한 코드
- Source를 번역하는데 번역한 코드를 기계어라고 한다. 그리고 실행 가능한 프로세스 구조를 가지고

 번역 -> 기계어 -> 프로세스 구조 -> 메모리
  |       |______________________|
 컴파일		     실행

- Programming 절차 -> 어떤 과제를 컴퓨터로 해결하는 결과물
 1. 과제 제시 | (ex) 자연수의 합을 출력 / 자연수가 아닌 값을 입력, 합을 보여주고 프로그램 종료.
 2. 입출력 설계
----------------------------------------기획(변수 종류, 변수명, 함수명 + 매개변수)

 3. 알고리즘 설계(기획) | 과제가 컴퓨터를 통해 해결되도록 과정을 명시(순서도, 의사코드, 자연어)한 것
 4. 언어 선택 -> 코딩 -> 원시코드(ex: .C, .PY) -> 프로그래밍(ex: .exe)
 5. 번역기 - 컴파일러 -> 번역 - 컴파일 -> (아래 확인)
 - 컴파일 중 오류 발생을 '문법 오류' or '컴파일 오류' 라고 함
 6. 기계어(어셈블리어:기계어와 일대일 대응 언어)
 7. 링킹(Linking) - 프로그램(프로세스 구조)을 만드는 작업 - 메모리 맵(메모리 배치)
 - C/C++언어 등의 변수가 선언되면 각각의 데이터 처리 변수 방식에 따라 특정 묶음으로 분리한다. 
 - 프로그래밍에 의해 작성 된 코드는 기계어 코드의 묶음으로 분리한다. 
 - 프로그램이 실행할 때 필요한 요소들의 묶음을 메모리에 나누어 배치한다.
 - 각각의 기능적 묶음은 실행파일에서 구별하여 저장한다. 
 - 사용자에 의해 실행하면 메모리에 묶음을 나누어 배치하고 기계어코드 영역을 실행 한다.
 - 자세한 링크 : https://ko.wikipedia.org/wiki/%EB%A9%94%EB%AA%A8%EB%A6%AC_%EB%A7%B5

 8. 로딩(Loading) - 메모리에 옮기는 작업
 9. 실행(프로세스) - 테스트 값을 입력 -> 결과 분석
 - 실행 중 오류 발생을 '논리 오류' or '런타임 오류' 라고 함
 - 문법오류나 논리오류 발생 시 수정하는 작업을 디버깅(Debug:벌레를 잡다)이라고 함
----------------------------------------구현(프로그램+주석)
 10. 정식 프로그램 출시



